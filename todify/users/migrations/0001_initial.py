# Generated by Django 3.0.8 on 2020-11-02 10:56

import django.contrib.postgres.fields.citext
from django.db import migrations, models
import todify.users.models
import uuid
import uuid_upload_path.storage
import versatileimagefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(blank=True, default='', max_length=120, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, default='', max_length=120, verbose_name='Last Name')),
                ('email', django.contrib.postgres.fields.citext.CIEmailField(db_index=True, max_length=254, unique=True, verbose_name='Email Address')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='Username')),
                ('avatar', versatileimagefield.fields.VersatileImageField(blank=True, null=True, upload_to=uuid_upload_path.storage.upload_to, verbose_name='Avatar')),
                ('avatar_poi', versatileimagefield.fields.PPOIField(default='0.5x0.5', editable=False, max_length=20, verbose_name="Avatar's Point of Interest")),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active Status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff Status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
                'ordering': ('-created_at',),
            },
            managers=[
                ('objects', todify.users.models.UserManager()),
            ],
        ),
    ]
